"use strict";(self.webpackChunksrcful_documentation=self.webpackChunksrcful_documentation||[]).push([[5234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,k=c["".concat(o,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:4,slug:"/developer/auth",pagination_prev:null},s="Bifrost Authentication Service",l={unversionedId:"developer/auth",id:"developer/auth",title:"Bifrost Authentication Service",description:"Bifrost is an authentication service that enables secure communication between external applications and the Sourceful Energy App (SEA). It serves as a bridge that facilitates safe authentication without requiring users to install external wallets on multiple devices.",source:"@site/docs/developer/auth.md",sourceDirName:"developer",slug:"/developer/auth",permalink:"/developer/auth",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,slug:"/developer/auth",pagination_prev:null},sidebar:"tutorialSidebar",next:{title:"Design manual and press",permalink:"/developer/design-manual"}},o={},p=[{value:"Key Features",id:"key-features",level:2},{value:"Authentication Flow",id:"authentication-flow",level:2},{value:"Session Lifecycle",id:"session-lifecycle",level:2},{value:"JWT Token Structure",id:"jwt-token-structure",level:2},{value:"Future Enhancements",id:"future-enhancements",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"API Endpoints",id:"api-endpoints",level:2},{value:"Create Session",id:"create-session",level:3},{value:"Get Session",id:"get-session",level:3},{value:"Delete Session",id:"delete-session",level:3},{value:"Implementation Example",id:"implementation-example",level:2},{value:"API Documentation",id:"api-documentation",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bifrost-authentication-service"},"Bifrost Authentication Service"),(0,i.kt)("p",null,"Bifrost is an authentication service that enables secure communication between external applications and the Sourceful Energy App (SEA). It serves as a bridge that facilitates safe authentication without requiring users to install external wallets on multiple devices."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Security by Design"),": Bifrost only handles public keys, never private keys. All private keys remain securely within either the SEA or the external application, ensuring that sensitive cryptographic material is never exposed to the bridge service.")),(0,i.kt)("mermaid",{value:"graph LR\n    A[External Application] <--\x3e B[Bifrost Service]\n    B <--\x3e C[Sourceful Energy App]"}),(0,i.kt)("h2",{id:"key-features"},"Key Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Delegated Authentication"),": Allows third-party applications to authenticate via SEA to access the Sourceful Energy API as the authenticated user"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"No External Wallet Requirements"),": Users don't need to install external wallets on all devices"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Secure Session Management"),": Short-lived sessions with explicit user approval"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"JWT-based Authentication"),": Signed tokens for authenticated API access"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Zero Private Key Exposure"),": Only public keys are transmitted through Bifrost, with private keys remaining securely within their respective applications")),(0,i.kt)("h2",{id:"authentication-flow"},"Authentication Flow"),(0,i.kt)("mermaid",{value:"sequenceDiagram\n    participant EA as External Application\n    participant BF as Bifrost\n    participant SEA as Sourceful Energy App\n    participant API as Sourceful Energy API\n    \n    Note over EA: Generate private key<br/>(remains in EA)\n    EA->>BF: POST /api/auth with delegatedKey (public key only)\n    BF->>EA: Return session_id and session_url\n    \n    Note over EA: Generate deep link or QR code\n    EA->>SEA: Deep link with session_id\n    \n    Note over SEA: User approval request\n    \n    alt User approves\n        Note over SEA: Sign JWT with user's<br/>private key (remains in SEA)\n        SEA->>BF: POST /api/auth/{session_id} with JWT token\n        BF->>SEA: Return success response\n        EA->>BF: polls GET /api/auth/{session_id}\n        BF->>EA: Return JTW token\n        \n        Note over EA: Use JWT for authentication\n        EA->>API: API requests with JWT\n        API->>EA: Return requested data\n    else User rejects or timeout (3 min)\n        SEA->>EA: Authentication failed\n    end"}),(0,i.kt)("h2",{id:"session-lifecycle"},"Session Lifecycle"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Session Creation"),": External application generates a private key and sends its public key to Bifrost"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Session Validity"),": Sessions are valid for a maximum of 3 minutes"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"User Approval"),": During this time, the user must approve the session in SEA"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Token Issuance"),": Upon approval, a signed JWT is returned to the external application"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"API Access"),": The JWT can then be used for authentication with the Sourceful Energy API")),(0,i.kt)("h2",{id:"jwt-token-structure"},"JWT Token Structure"),(0,i.kt)("p",null,"JWT tokens issued by Bifrost follow this structure:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "alg": "Ed25519",\n  "typ": "JWT"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Payload"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "created": "2025-04-28T08:50:41Z",\n  "expiration": "2025-04-28T20:50:41Z",\n  "issuer": "Bygcy876b3bsjMvvhZxghvs3EyR5y6a7vpvAp5D62n2w",\n  "delegatedKey": "AWyXK19172kDydraqvqo1sAHpEBmPC81yxWsGFnShQbc"\n}\n')),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"issuer"),": The user's public key whose corresponding private key signs the JWT in SEA"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"delegatedKey"),": The public key of the external application whose generated private key can be used to sign messages")),(0,i.kt)("p",null,"In an application it makes sense to show the issuer public key so the user understands what wallet is logged in, but at the same time make it clear that this is a JTW token based authentication. It does not make sense to show the delegatedKey as this is only used internally in the application and JWT token. Also note that the expiration time can be changed, as of now the default time to live is 12h."),(0,i.kt)("h3",{id:"future-enhancements"},"Future Enhancements"),(0,i.kt)("p",null,"The JWT structure allows for extensibility. In future versions, additional fields can be added to the payload to provide fine-grained access rights, enabling more nuanced permission controls. The time to live can also be customized by either the protocl or the user in future versions."),(0,i.kt)("h2",{id:"security-considerations"},"Security Considerations"),(0,i.kt)("mermaid",{value:"flowchart TD\n    A[Security Measures] --\x3e B[3-minute Session Timeout]\n    A --\x3e C[JWT with Limited TTL]\n    A --\x3e D[User Explicit Approval]\n    A --\x3e E[Transfer Gateway Restriction]\n    A --\x3e J[Private Key Isolation]\n    \n    B --\x3e F[Reduces Attack Window]\n    C --\x3e G[Limits Compromise Duration]\n    D --\x3e H[Prevents Silent Attacks]\n    E --\x3e I[Protects Critical Operations]\n    J --\x3e K[Prevents Key Compromise]"}),(0,i.kt)("p",null,"While JWT token authentication provides improved user experience and security compared to exporting private keys, it still presents potential phishing risks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An attacker could generate a session and send a deep link to a user"),(0,i.kt)("li",{parentName:"ul"},"If the user approves the authentication request, the attacker could gain access")),(0,i.kt)("p",null,"To mitigate these risks, Bifrost implements:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Short Session Timeouts"),": Sessions expire after 3 minutes"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Limited JWT Validity"),": Tokens have a specified time-to-live"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Transfer Gateway Protection"),": The transfer gateway mutation does not accept JWT authentication"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Private Key Separation"),": Private keys never leave their origin applications:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"External application's private key remains in the external application"),(0,i.kt)("li",{parentName:"ul"},"User's private key remains in the SEA"),(0,i.kt)("li",{parentName:"ul"},"Bifrost only handles public keys and signed tokens")))),(0,i.kt)("h2",{id:"api-endpoints"},"API Endpoints"),(0,i.kt)("h3",{id:"create-session"},"Create Session"),(0,i.kt)("p",null,"Creates a new authentication session for key exchange between an external application and SEA."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"URL"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/auth")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"POST")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Request Body"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "delegatedKey": "5LubpwhZzwkKW49a2b5GwfFJdep1xtMDsuVeMGeBvJfx"\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "session_url": "https://example.com/auth/session/abcd1234",\n  "session_id": "abcd1234"\n}\n')))),(0,i.kt)("h3",{id:"get-session"},"Get Session"),(0,i.kt)("p",null,"Retrieves the current state of a session."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"URL"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/auth/{session_id}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "delegatedKey": "5LubpwhZzwkKW49a2b5GwfFJdep1xtMDsuVeMGeBvJfx",\n  "expiresAt": 1619654400,\n  "token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0..."\n}\n')))),(0,i.kt)("h3",{id:"delete-session"},"Delete Session"),(0,i.kt)("p",null,"Explicitly deletes a session before it expires."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"URL"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/auth/{session_id}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"DELETE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": "success"\n}\n')))),(0,i.kt)("h2",{id:"implementation-example"},"Implementation Example"),(0,i.kt)("mermaid",{value:'sequenceDiagram\n    participant EA as External App\n    participant BF as Bifrost\n    participant SEA as Sourceful Energy App\n    \n    EA->>EA: Generate key pair<br/>(private key stays in EA)\n    EA->>BF: POST /api/auth<br/>{ delegatedKey: "public_key" }\n    BF->>EA: { session_id: "xyz123", session_url: "..." }\n    \n    EA->>EA: Generate QR code/deep link\n    \n    Note over SEA: User scans QR/clicks link\n    SEA->>BF: GET /api/auth/xyz123\n    BF->>SEA: { delegatedKey: "public_key", expiresAt: 12345 }\n    \n    Note over SEA: User approves auth\n    SEA->>SEA: Sign JWT with user\'s private key<br/>(private key never leaves SEA)\n    SEA->>BF: POST /api/auth/xyz123<br/>{ token: "signed_jwt" }\n    BF->>SEA: { status: "success" }\n    \n    EA->>BF: GET /api/auth/xyz123\n    BF->>EA: { delegatedKey: "public_key", token: "signed_jwt", expiresAt: 12345 }\n    \n    Note over EA: Store JWT for API auth'}),(0,i.kt)("h2",{id:"api-documentation"},"API Documentation"),(0,i.kt)("p",null,"The full OpenAPI documentation is available at:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"https://bifrost.srcful.dev/docs\n")))}d.isMDXComponent=!0}}]);