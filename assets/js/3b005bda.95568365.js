"use strict";(self.webpackChunksrcful_documentation=self.webpackChunksrcful_documentation||[]).push([[5234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),k=i,m=c["".concat(o,".").concat(k)]||c[k]||d[k]||r;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=k;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:4,slug:"/developer/auth",pagination_prev:null},s="Bifrost Authentication Service",l={unversionedId:"developer/auth",id:"developer/auth",title:"Bifrost Authentication Service",description:"Bifrost is an authentication service that enables secure communication between external applications and the Sourceful Energy App (SEA). It serves as a bridge that facilitates safe authentication without requiring users to install external wallets on multiple devices.",source:"@site/docs/developer/auth.md",sourceDirName:"developer",slug:"/developer/auth",permalink:"/developer/auth",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,slug:"/developer/auth",pagination_prev:null},sidebar:"tutorialSidebar",next:{title:"Energy Management Systems (EMS)",permalink:"/developer/ems"}},o={},p=[{value:"Key Features",id:"key-features",level:2},{value:"Authentication Flow",id:"authentication-flow",level:2},{value:"Session Lifecycle",id:"session-lifecycle",level:2},{value:"JWT Delegate Token Structure",id:"jwt-delegate-token-structure",level:2},{value:"Permissions",id:"permissions",level:3},{value:"Future Enhancements",id:"future-enhancements",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"API Endpoints",id:"api-endpoints",level:2},{value:"Create Session",id:"create-session",level:3},{value:"Get Session",id:"get-session",level:3},{value:"Delete Session",id:"delete-session",level:3},{value:"Implementation Example",id:"implementation-example",level:2},{value:"API Documentation",id:"api-documentation",level:2},{value:"Token Renewal",id:"token-renewal",level:2},{value:"JWT Renew Token Structure",id:"jwt-renew-token-structure",level:3},{value:"JWT Renew Certificate Structure",id:"jwt-renew-certificate-structure",level:3},{value:"Validation",id:"validation",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bifrost-authentication-service"},"Bifrost Authentication Service"),(0,i.kt)("p",null,"Bifrost is an authentication service that enables secure communication between external applications and the Sourceful Energy App (SEA). It serves as a bridge that facilitates safe authentication without requiring users to install external wallets on multiple devices."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Security by Design"),": Bifrost only handles public keys, never private keys. All private keys remain securely within either the SEA or the external application, ensuring that sensitive cryptographic material is never exposed to the bridge service.")),(0,i.kt)("mermaid",{value:"graph LR\n    A[External Application] <--\x3e B[Bifrost Service]\n    B <--\x3e C[Sourceful Energy App]"}),(0,i.kt)("h2",{id:"key-features"},"Key Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Delegated Authentication"),": Allows third-party applications to authenticate via SEA to access the Sourceful Energy API as the authenticated user"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"No External Wallet Requirements"),": Users don't need to install external wallets on all devices"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Secure Session Management"),": Short-lived sessions with explicit user approval"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"JWT-based Authentication"),": Signed tokens for authenticated API access"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Zero Private Key Exposure"),": Only public keys are transmitted through Bifrost, with private keys remaining securely within their respective applications")),(0,i.kt)("h2",{id:"authentication-flow"},"Authentication Flow"),(0,i.kt)("mermaid",{value:"sequenceDiagram\n    participant EA as External Application\n    participant BF as Bifrost\n    participant SEA as Sourceful Energy App\n    participant API as Sourceful Energy API\n    \n    Note over EA: Generate private key<br/>(remains in EA)\n    EA->>BF: POST /api/auth with delegatedKey (public key only) and attrubutes object\n    BF->>EA: Return session_id and session_url\n    \n    Note over EA: Generate deep link or QR code\n    EA->>SEA: Deep link with session_id\n    \n    Note over SEA: User approval request\n    \n    alt User approves\n        Note over SEA: Sign JWT with user's<br/>private key (remains in SEA)\n        SEA->>BF: POST /api/auth/{session_id} with JWT token\n        BF->>SEA: Return success response\n        EA->>BF: polls GET /api/auth/{session_id}\n        BF->>EA: Return JTW token\n        \n        Note over EA: Use JWT for authentication\n        EA->>API: API requests with JWT\n        API->>EA: Return requested data\n    else User rejects or timeout (3 min)\n        SEA->>EA: Authentication failed\n    end"}),(0,i.kt)("h2",{id:"session-lifecycle"},"Session Lifecycle"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Session Creation"),": External application generates a private key and sends its public key and an attributes object to Bifrost "),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Session Validity"),": Sessions are valid for a maximum of 3 minutes"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"User Approval"),": During this time, the user must approve the session in SEA"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Token Issuance"),": Upon approval, a signed JWT is returned to the external application"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"API Access"),": The JWT can then be used for authentication with the Sourceful Energy API")),(0,i.kt)("h2",{id:"jwt-delegate-token-structure"},"JWT Delegate Token Structure"),(0,i.kt)("p",null,"JWT tokens issued by Bifrost follow this structure:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "alg": "Ed25519",\n  "typ": "JWT"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Payload"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "created": "2025-04-28T08:50:41Z",\n  "expiration": "2025-04-28T20:50:41Z",\n  "issuer": "Bygcy876b3bsjMvvhZxghvs3EyR5y6a7vpvAp5D62n2w",\n  "delegatedKey": "AWyXK19172kDydraqvqo1sAHpEBmPC81yxWsGFnShQbc"\n  "attributes": {"nonce":"abc123", "name":"Test Application", "permissions":{...}}\n}\n')),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"issuer"),": The user's public key whose corresponding private key signs the JWT in SEA"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"delegatedKey"),": The public key of the external application whose generated private key can be used to sign messages"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"attributes"),": Additional attributes that describe the token, currently ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"nonce"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"permissions")," are supporte by the SEA and API Backend. Permissions are of particular interest and are documented in its own section, but basically describe what the token is allowed to do with defined resources. The ",(0,i.kt)("inlineCode",{parentName:"li"},"nonce")," attribute is added by bifrost automatically.")),(0,i.kt)("p",null,"In an application it makes sense to show the issuer public key so the user understands what wallet is logged in, but at the same time make it clear that this is a delegatge token based authentication. It does not make sense to show the delegatedKey as this is only used internally in the application and JWT token. Also note that the expiration time can be changed, as of now the default time to live is 12h."),(0,i.kt)("h3",{id:"permissions"},"Permissions"),(0,i.kt)("p",null,"TODO: Document the permissions here."),(0,i.kt)("h3",{id:"future-enhancements"},"Future Enhancements"),(0,i.kt)("p",null,"The JWT structure allows for extensibility. In future versions, additional fields can be added to the payload to provide fine-grained access rights, enabling more nuanced permission controls. The time to live can also be customized by either the protocl or the user in future versions."),(0,i.kt)("h2",{id:"security-considerations"},"Security Considerations"),(0,i.kt)("mermaid",{value:"flowchart TD\n    A[Security Measures] --\x3e B[3-minute Session Timeout]\n    A --\x3e C[JWT with Limited TTL]\n    A --\x3e D[User Explicit Approval]\n    A --\x3e E[Transfer Gateway Restriction]\n    A --\x3e J[Private Key Isolation]\n    \n    B --\x3e F[Reduces Attack Window]\n    C --\x3e G[Limits Compromise Duration]\n    D --\x3e H[Prevents Silent Attacks]\n    E --\x3e I[Protects Critical Operations]\n    J --\x3e K[Prevents Key Compromise]"}),(0,i.kt)("p",null,"While JWT token authentication provides improved user experience and security compared to exporting private keys, it still presents potential phishing risks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An attacker could generate a session and send a deep link to a user"),(0,i.kt)("li",{parentName:"ul"},"If the user approves the authentication request, the attacker could gain access")),(0,i.kt)("p",null,"To mitigate these risks, Bifrost implements:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Short Session Timeouts"),": Sessions expire after 3 minutes"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Limited JWT Validity"),": Tokens have a specified time-to-live"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Transfer Gateway Protection"),": The transfer gateway mutation does not accept JWT authentication"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Private Key Separation"),": Private keys never leave their origin applications:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"External application's private key remains in the external application"),(0,i.kt)("li",{parentName:"ul"},"User's private key remains in the SEA"),(0,i.kt)("li",{parentName:"ul"},"Bifrost only handles public keys and signed tokens")))),(0,i.kt)("h2",{id:"api-endpoints"},"API Endpoints"),(0,i.kt)("h3",{id:"create-session"},"Create Session"),(0,i.kt)("p",null,"Creates a new authentication session for key exchange between an external application and SEA."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"URL"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/auth")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"POST")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Request Body"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "delegatedKey": "5LubpwhZzwkKW49a2b5GwfFJdep1xtMDsuVeMGeBvJfx"\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "session_url": "https://example.com/auth/session/abcd1234",\n  "session_id": "abcd1234"\n}\n')))),(0,i.kt)("h3",{id:"get-session"},"Get Session"),(0,i.kt)("p",null,"Retrieves the current state of a session."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"URL"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/auth/{session_id}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "delegatedKey": "5LubpwhZzwkKW49a2b5GwfFJdep1xtMDsuVeMGeBvJfx",\n  "expiresAt": 1619654400,\n  "token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0..."\n  "attributes": {...}\n}\n')))),(0,i.kt)("h3",{id:"delete-session"},"Delete Session"),(0,i.kt)("p",null,"Explicitly deletes a session before it expires."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"URL"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/auth/{session_id}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Method"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"DELETE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Response"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": "success"\n}\n')))),(0,i.kt)("h2",{id:"implementation-example"},"Implementation Example"),(0,i.kt)("mermaid",{value:'sequenceDiagram\n    participant EA as External App\n    participant BF as Bifrost\n    participant SEA as Sourceful Energy App\n    \n    EA->>EA: Generate key pair<br/>(private key stays in EA)\n    EA->>BF: POST /api/auth<br/>{ delegatedKey: "public_key", attributes: {name: "Test Application"} }\n    BF->>EA: { session_id: "xyz123", session_url: "..." }\n    \n    EA->>EA: Generate QR code/deep link\n    \n    Note over SEA: User scans QR/clicks link\n    SEA->>BF: GET /api/auth/xyz123\n    BF->>SEA: { delegatedKey: "public_key", expiresAt: 12345 }\n    \n    Note over SEA: User approves auth\n    SEA->>SEA: Sign JWT with user\'s private key<br/>(private key never leaves SEA)\n    SEA->>BF: POST /api/auth/xyz123<br/>{ token: "signed_jwt" }\n    BF->>SEA: { status: "success" }\n    \n    EA->>BF: GET /api/auth/xyz123\n    BF->>EA: { delegatedKey: "public_key", token: "signed_jwt", expiresAt: 12345 }\n    \n    Note over EA: Store JWT for API auth'}),(0,i.kt)("h2",{id:"api-documentation"},"API Documentation"),(0,i.kt)("p",null,"The full OpenAPI documentation is available at:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"https://bifrost.srcful.dev/docs\n")),(0,i.kt)("h2",{id:"token-renewal"},"Token Renewal"),(0,i.kt)("p",null,"Below is a proposal and not yet implemented."),(0,i.kt)("p",null,"In general the delegateToken is short lived and cannot be renewed without involving signing byt the issuer wallet. This would require a user interaction in general. This poses a problem for usability in some applications and problems when working with automations and integrations that are long lived."),(0,i.kt)("p",null,"A delegate token can be marked for renewal (has renew: true, and nonce set in the attributes'). In this case an application can ask bifrost for a renewal certificate. This certificate allows the client (as identified by the delegateKey) to create it's own delegateToken. This renew token has the following structure:"),(0,i.kt)("h3",{id:"jwt-renew-token-structure"},"JWT Renew Token Structure"),(0,i.kt)("p",null,"JWT renew tokens follow this structure:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "alg": "Ed25519",\n  "typ": "JWT"\n  "tkt": "renew"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Payload"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "delegate": the original delegate token jwt (signed by the issuer)\n  "cert": the renew cert token (signed by bifrost)\n}\n')),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"delegate"),": The original delegate token signed by the issuer. Importantly this token contains the permissions, nonce and delegateKey"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"cert"),": The certificate token signed by bifrost. Importantly it contains new created and expiration times as well as the nonce of the original delegate token and a bifrost key id.")),(0,i.kt)("p",null,"Note the subtype (styp) in the header is set to renew."),(0,i.kt)("p",null,"A client application will periodically ask Bifrost for a new certificate token and build its own renew token based on this. This can then be used in the backend API calls according to the permissions of the original token. If the original token is revoked by the user, bifrost will not issue a new certificate."),(0,i.kt)("h3",{id:"jwt-renew-certificate-structure"},"JWT Renew Certificate Structure"),(0,i.kt)("p",null,"Bifrost creates the renew certificate and signs it with its internal private key.\n",(0,i.kt)("strong",{parentName:"p"},"Header"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "alg": "Ed25519",\n  "typ": "JWT"\n  "tkt": "renewcrt"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Payload"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "iss": "7f3a9b2e",\n  "created": "2025-04-28T08:50:41Z",\n  "expiration": "2025-04-28T09:10:41Z",\n  "tnonce": "gxM4TS1jlMXrn8WZYiT2sa6KTj5OykpyyVREsztJmm4",\n  "delegatedKey": "CQLXd4Py9PENcUQbKZyeiipzzoVrcF8WntzARH9Pvv98",\n  "nonce": "b88b45e1-fc5a-4cb1-b689-0d8f7f4cba04"\n}\n')),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"iss"),": The id of the public key in Bifrost"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"tnonce"),": The delegate token nonce as specified in attributes.nonce"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"delegatedKey"),": The delegated key as specified in the delegate token")),(0,i.kt)("h3",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Validation of a renew token follows the steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Extract the delegate token and certificate tokens."),(0,i.kt)("li",{parentName:"ol"},"Ensure valid signatures of the delegate token and certificate tokens (fetch the public key from Bifrost using the keyId in the certificate token)."),(0,i.kt)("li",{parentName:"ol"},"Ensure valid signature of renew token (use delegateKey from delegate token)"),(0,i.kt)("li",{parentName:"ol"},"Ensure certificate token is not expired and that nonce is the same in the certificate and the delegate token"),(0,i.kt)("li",{parentName:"ol"},"The renew token is now valid and continued validation of message and permissions can be done.")))}d.isMDXComponent=!0}}]);