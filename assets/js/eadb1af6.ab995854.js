"use strict";(self.webpackChunksrcful_documentation=self.webpackChunksrcful_documentation||[]).push([[9197],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},9332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"developer/API/api-docs","title":"GraphQL API","description":"Overview","source":"@site/docs/developer/API/api-docs.md","sourceDirName":"developer/API","slug":"/developer/api/docs","permalink":"/developer/api/docs","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"slug":"/developer/api/docs","pagination_prev":null},"sidebar":"docs","next":{"title":"Authentication","permalink":"/developer/api/authentication"}}');var a=t(4848),i=t(8453);const s={sidebar_position:1,slug:"/developer/api/docs",pagination_prev:null},d="GraphQL API",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Keys and Identifiers",id:"keys-and-identifiers",level:2},{value:"The Gateway Concept",id:"the-gateway-concept",level:3},{value:"Key Identifier Types",id:"key-identifier-types",level:3},{value:"Understanding the Relationship Between IDs",id:"understanding-the-relationship-between-ids",level:4},{value:"API Playground &amp; Gateway Explorer",id:"api-playground--gateway-explorer",level:3},{value:"Available Data Sources",id:"available-data-sources",level:2},{value:"Example Queries",id:"example-queries",level:2},{value:"List gateway DERS",id:"list-gateway-ders",level:3},{value:"Real-time Solar Production for a gateway",id:"real-time-solar-production-for-a-gateway",level:3},{value:"Real-time Solar Production for a solar DER",id:"real-time-solar-production-for-a-solar-der",level:3},{value:"Battery Status with Historical Data",id:"battery-status-with-historical-data",level:3},{value:"Grid Consumption &amp; Export",id:"grid-consumption--export",level:3},{value:"Time-Series Data Options",id:"time-series-data-options",level:2},{value:"Time Ranges",id:"time-ranges",level:3},{value:"Resolution Options",id:"resolution-options",level:3},{value:"Example Python Code",id:"example-python-code",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"graphql-api",children:"GraphQL API"})}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"The Sourceful GraphQL API provides access to real-time and historical data from distributed energy resources (DERs). You can query solar production, battery storage, and energy consumption data to build powerful monitoring and analytics applications."}),"\n",(0,a.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Basic query example\ncurl -X POST \\\n  -H "Content-Type: application/json" \\\n  -d \'{"query": "{ derData { solar(gwId: \\"your-gateway-id\\") { latest { ts power } } } }"}\' \\\n  https://api.srcful.dev\n'})}),"\n",(0,a.jsx)(n.h2,{id:"keys-and-identifiers",children:"Keys and Identifiers"}),"\n",(0,a.jsx)(n.p,{children:"The GraphQL API uses several different identifiers to access data from distributed energy resources (DERs). Understanding these identifiers is crucial for effectively querying the API and retrieving the correct data."}),"\n",(0,a.jsx)(n.h3,{id:"the-gateway-concept",children:"The Gateway Concept"}),"\n",(0,a.jsx)(n.p,{children:"In the Sourceful ecosystem, all data access is managed through the concept of gateways. A gateway is any device or service that collects and transmits data from energy resources to the Sourceful platform."}),"\n",(0,a.jsx)(n.h3,{id:"key-identifier-types",children:"Key Identifier Types"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Identifier"}),(0,a.jsx)(n.th,{children:"Format"}),(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"Used In"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:["Gateway ID (",(0,a.jsx)(n.code,{children:"gwId"}),")"]}),(0,a.jsx)(n.td,{children:'String (e.g., "012307e4843d412cee")'}),(0,a.jsx)(n.td,{children:"Unique identifier for a device"}),(0,a.jsx)(n.td,{children:"Querys where the full context of the device/gateway is used"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:["DER Serial Number (",(0,a.jsx)(n.code,{children:"sn"}),")"]}),(0,a.jsx)(n.td,{children:'String (e.g., "pv-JgpMp...JhRP")'}),(0,a.jsx)(n.td,{children:"Hashed/encoded identifier for a specific DER, have a prefix in the start (e.g., em-, pv-) that shows the type of DER it represents"}),(0,a.jsx)(n.td,{children:"Used to query data from a specific device in the network"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:["Raw Serial Number (",(0,a.jsx)(n.code,{children:"rawSn"}),")"]}),(0,a.jsx)(n.td,{children:"String"}),(0,a.jsx)(n.td,{children:"Actual serial number of the physical device (only available via authentication)"}),(0,a.jsx)(n.td,{children:"Limited use"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsxs)(n.td,{children:["Device Reference (",(0,a.jsx)(n.code,{children:"devRef"}),")"]}),(0,a.jsx)(n.td,{children:"String"}),(0,a.jsx)(n.td,{children:"Reference to connect multiple DERs to the same physical device"}),(0,a.jsx)(n.td,{children:"Used to know the physical connection between DERs"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"understanding-the-relationship-between-ids",children:"Understanding the Relationship Between IDs"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"A Device/Gateway (gwId) can have multiple DERs connected to it"}),"\n",(0,a.jsx)(n.li,{children:"Each DER has a unique Serial Number (sn)"}),"\n",(0,a.jsx)(n.li,{children:"Multiple DERs may reference the same physical device via devRef"}),"\n",(0,a.jsx)(n.li,{children:"The rawSn is the actual hardware serial number (only available to authenticated users)"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"api-playground--gateway-explorer",children:"API Playground & Gateway Explorer"}),"\n",(0,a.jsxs)(n.p,{children:["Want to experiment first? Visit our interactive ",(0,a.jsx)(n.a,{href:"https://api.srcful.dev/playground",children:"API Playground"})," to build queries, explore the schema, and see real-time results."]}),"\n",(0,a.jsxs)(n.p,{children:["Need gateway IDs to use in your queries? Check out the ",(0,a.jsx)(n.a,{href:"https://explorer.sourceful.energy",children:"Sourceful Explorer"})," to find active gateways and their IDs for testing."]}),"\n",(0,a.jsx)(n.h2,{id:"available-data-sources",children:"Available Data Sources"}),"\n",(0,a.jsx)(n.p,{children:"Our API gives you access to multiple energy data sources through a unified interface:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Data Source"}),(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"Key Metrics"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Solar"}),(0,a.jsx)(n.td,{children:"Solar panel production"}),(0,a.jsx)(n.td,{children:"Current power (kW), Daily totals (kWh)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Battery"}),(0,a.jsx)(n.td,{children:"Battery storage systems"}),(0,a.jsx)(n.td,{children:"State of charge (%), Power flow (kW)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Energy Meter"}),(0,a.jsx)(n.td,{children:"Grid tie consumption/export"}),(0,a.jsx)(n.td,{children:"Consumption (kW), Delivery (kW), Phase data"})]})]})]}),"\n",(0,a.jsxs)(n.p,{children:["In general, data can be queried on a per gateway or specific DER basis. Use the ",(0,a.jsx)(n.a,{href:"https://api.srcful.dev/playground",children:"API Playground"})," for the most recent documentation and queries."]}),"\n",(0,a.jsx)(n.h2,{id:"example-queries",children:"Example Queries"}),"\n",(0,a.jsx)(n.h3,{id:"list-gateway-ders",children:"List gateway DERS"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  gateway {\n    gateway(id: "your-gateway-id") {\n      ders {\n        type\n        sn\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"real-time-solar-production-for-a-gateway",children:"Real-time Solar Production for a gateway"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  derData {\n    solar(gwId: "your-gateway-id") {\n      latest {\n        ts\n        power  # Current power in kW\n      }\n      today   # Total generation today in kWh\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"real-time-solar-production-for-a-solar-der",children:"Real-time Solar Production for a solar DER"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  derData {\n    solar(sn: "your-der-serial-number") {\n      latest {\n        ts\n        power  # Current power in kW\n      }\n      today   # Total generation today in kWh\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"battery-status-with-historical-data",children:"Battery Status with Historical Data"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  derData {\n    battery(gwId: "your-gateway-id") {\n      latest {\n        ts\n        power  # Positive = charging, Negative = discharging\n        soc    # State of charge percentage\n      }\n      historical(\n       start: "2025-04-01T00:00:00Z",\n        stop: "2025-05-01T23:59:59Z",\n        resolution: "15m"\n      ) {\n        ts\n        power\n        soc\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"grid-consumption--export",children:"Grid Consumption & Export"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:'{\n  derData {\n    energyMeter(gwId: "your-gateway-id") {\n      latest {\n        ts\n        consumption  # Grid power consumed (kW)\n        delivery     # Power exported to grid (kW)\n        consumptionL1\n        consumptionL2\n        consumptionL3\n      }\n      daily(start: "2025-04-01", stop: "2025-05-01") {\n        ts\n        consumption\n        delivery\n      }\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"time-series-data-options",children:"Time-Series Data Options"}),"\n",(0,a.jsx)(n.p,{children:"Control how you retrieve historical data with these flexible parameters:"}),"\n",(0,a.jsx)(n.h3,{id:"time-ranges",children:"Time Ranges"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Specify precise start/stop times using ISO-8601 format"}),"\n",(0,a.jsx)(n.li,{children:"Custom date ranges for daily aggregations"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"resolution-options",children:"Resolution Options"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"resolution"})," parameter accepts these formats:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"15s"'})," - 15-second intervals"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"5m"'})," - 5-minute intervals"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"1h"'})," - Hourly intervals"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"1d"'})," - Daily intervals"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example-python-code",children:"Example Python Code"}),"\n",(0,a.jsx)(n.p,{children:"The below example shows how programmatically query for data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import requests\nimport json\n\nGRAPHQL_ENDPOINT = "https://api.srcful.dev/"\nGW_ID = "Your Gateway ID"  # Replace with your actual gateway ID\n\ndef fetch_battery_data():\n    """\n    Fetches battery data (latest and historical) from the backend API.\n    """\n    print("Fetching battery data...")\n\n    # Construct the GraphQL query\n    query = f"""\n    {{\n      derData {{\n        battery(gwId: "{GW_ID}") {{\n          latest {{\n            ts\n            power\n            soc\n          }}\n          historical(\n            start: "2025-04-01T00:00:00Z",\n            stop: "2025-04-03T23:59:59Z",\n            resolution: "15m"\n          ) {{\n            ts\n            power\n            soc\n          }}\n        }}\n      }}\n    }}\n    """\n\n    # Prepare the request payload\n    graphql_request_payload = {\n        "query": query\n    }\n\n    # Send the request to the backend\n    try:\n        print(f"Sending request to backend: {GRAPHQL_ENDPOINT}")\n        response = requests.post(\n            GRAPHQL_ENDPOINT,\n            json=graphql_request_payload,\n            headers={\'Content-Type\': \'application/json\'},\n            timeout=30 \n        )\n        response.raise_for_status() \n\n        # Print the response\n        print(f"Backend Status Code: {response.status_code}")\n        response_data = response.json()\n        print("Backend Response:")\n        print(json.dumps(response_data, indent=2))\n\n        # Check for GraphQL errors\n        if \'errors\' in response_data:\n            print("\\n--- GraphQL Errors ---")\n            for error in response_data[\'errors\']:\n                print(f"- {error.get(\'message\', \'Unknown error\')}")\n            print("----------------------")\n        elif \'data\' in response_data:\n            print("\\nBattery Data:")\n            print(json.dumps(response_data[\'data\'], indent=2))\n\n    except requests.exceptions.RequestException as e:\n        print(f"Error sending request to backend: {e}")\n    except json.JSONDecodeError:\n        print(f"Error decoding JSON response from backend: {response.text}")\n\n# --- Main Execution ---\nif __name__ == "__main__":\n    fetch_battery_data()\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);