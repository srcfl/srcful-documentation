"use strict";(self.webpackChunksrcful_documentation=self.webpackChunksrcful_documentation||[]).push([[9711],{659:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"developer/hardware/flashing-zap-firmware","title":"Flashing Zap Firmware","description":"This guide covers the process of flashing Sourceful Zap firmware to ESP32-C3 devices using the sequential flasher tool.","source":"@site/docs/developer/hardware/flashing-zap-firmware.md","sourceDirName":"developer/hardware","slug":"/developer/hardware/flashing-zap-firmware","permalink":"/developer/hardware/flashing-zap-firmware","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"slug":"/developer/hardware/flashing-zap-firmware"},"sidebar":"docs","previous":{"title":"Hardware Setup","permalink":"/developer/hardware"},"next":{"title":"Zap Packaging Guide","permalink":"/developer/hardware/packaging"}}');var r=s(4848),l=s(8453);const a={sidebar_position:1,slug:"/developer/hardware/flashing-zap-firmware"},t="Flashing Zap Firmware",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Option A: Using uv (Recommended)",id:"option-a-using-uv-recommended",level:3},{value:"Option B: Traditional pip",id:"option-b-traditional-pip",level:3},{value:"Firmware Setup",id:"firmware-setup",level:2},{value:"Flashing Process",id:"flashing-process",level:2},{value:"Quick Start",id:"quick-start",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3},{value:"Available Options",id:"available-options",level:3},{value:"Flashing Workflow",id:"flashing-workflow",level:2},{value:"Output Files",id:"output-files",level:2},{value:"Example CSV Output",id:"example-csv-output",level:3},{value:"Performance",id:"performance",level:2},{value:"Features",id:"features",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Permission Issues",id:"permission-issues",level:3},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Commands",id:"debug-commands",level:3},{value:"File Structure",id:"file-structure",level:2},{value:"Development",id:"development",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"flashing-zap-firmware",children:"Flashing Zap Firmware"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers the process of flashing Sourceful Zap firmware to ESP32-C3 devices using the sequential flasher tool."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Sourceful Zap flasher is a standalone tool for flashing firmware to ESP32-C3 devices sequentially on a single serial port. It automatically extracts device serial numbers and public keys from the flashed firmware."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Python 3.8+"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"USB access"})," to your serial device"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ESP32-C3 devices"})," with USB connector"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://docs.astral.sh/uv/",children:"uv"})})," package manager (recommended)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.h3,{id:"option-a-using-uv-recommended",children:"Option A: Using uv (Recommended)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install uv if you haven't already\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Clone the flasher repository\ngit clone https://github.com/srcfl/srcful-zap-x-firmware.git\ncd srcful-zap-x-firmware\n\n# uv automatically creates venv and installs dependencies\nuv sync\n"})}),"\n",(0,r.jsx)(n.h3,{id:"option-b-traditional-pip",children:"Option B: Traditional pip"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create and activate virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n"})}),"\n",(0,r.jsx)(n.h2,{id:"firmware-setup",children:"Firmware Setup"}),"\n",(0,r.jsx)(n.p,{children:"Place your Sourceful Zap firmware binaries in a directory. Expected structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"c3_1_1_0/          # Or any directory name\n\u251c\u2500\u2500 bootloader.bin\n\u251c\u2500\u2500 partition-table.bin\n\u2514\u2500\u2500 zap-idf.bin    # Main firmware file\n"})}),"\n",(0,r.jsx)(n.h2,{id:"flashing-process",children:"Flashing Process"}),"\n",(0,r.jsx)(n.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Fast mode - auto-detects everything\nuv run flasher.py\n\n# Quiet mode for production\nuv run flasher.py --quiet\n\n# Specify binary directory\nuv run flasher.py --bin-dir c3_1_1_0\n"})}),"\n",(0,r.jsx)(n.h3,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Safer mode with flash erase (slower but more reliable)\nuv run flasher.py --erase\n\n# Specify port manually\nuv run flasher.py --port /dev/cu.usbmodem101\n\n# Manual file specification\nuv run flasher.py --files \\\n  0x0:c3_1_1_0/bootloader.bin \\\n  0x8000:c3_1_1_0/partition-table.bin \\\n  0x10000:c3_1_1_0/zap-idf.bin\n\n# Debug mode to test setup\nuv run flasher.py --debug\n"})}),"\n",(0,r.jsx)(n.h3,{id:"available-options",children:"Available Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--list-ports"})," \u2014 Show available serial ports"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--chip esp32c3"})," \u2014 Force chip type (usually auto-detected)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--verify-flash"})," \u2014 Verify flash after writing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--timeout 30"})," \u2014 Serial read timeout in seconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--output-base my_batch"})," \u2014 Custom output file prefix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--quiet"})," \u2014 Minimal output for production use"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--erase"})," \u2014 Perform flash erase before writing (slower but more reliable)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"flashing-workflow",children:"Flashing Workflow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connect"})," ESP32-C3 device via USB to computer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor CSV"})," file to verify information is being captured"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Watch terminal"}),' for "Device flashed successfully!" message']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flash"})," - Tool automatically erases (optional), flashes firmware, and resets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extract"})," - Captures serial number and public key from device output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Save"})," - Appends results to CSV file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Disconnect"})," device and connect the next one"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repeat"})," until done (Ctrl+C to stop)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"output-files",children:"Output Files"}),"\n",(0,r.jsx)(n.p,{children:"The tool creates timestamped files:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["CSV File: ",(0,r.jsx)(n.code,{children:"flash_results_YYYYMMDD_HHMMSS.csv"})]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Columns: ",(0,r.jsx)(n.code,{children:"ecc_serial"}),", ",(0,r.jsx)(n.code,{children:"mac_eth0"}),", ",(0,r.jsx)(n.code,{children:"mac_wlan0"}),", ",(0,r.jsx)(n.code,{children:"helium_public_key"}),", ",(0,r.jsx)(n.code,{children:"full_public_key"})]}),"\n",(0,r.jsx)(n.li,{children:"Ready for import into spreadsheets"}),"\n",(0,r.jsx)(n.li,{children:"Send completed CSV file to provisioning team"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["JSON File: ",(0,r.jsx)(n.code,{children:"flash_results_YYYYMMDD_HHMMSS.json"})]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Detailed per-device information including full serial output"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-csv-output",children:"Example CSV Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csv",children:"ecc_serial,mac_eth0,mac_wlan0,helium_public_key,full_public_key\nzap-000058b868e385a0,,,,1d28faa8df6ed0b194839503c49c74aeff710825d45f7f4f8eb328963b9a6634...\nzap-0000c4458290a994,,,,df592f4cbd88f2aab7abad0c750cad0b822dc28bd649b6450d3e40668ced4015...\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast mode"})," (default): ~15-20 seconds per device"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"With erase"}),": ~25-30 seconds per device"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bottlenecks"}),": Device boot time (~10s) and serial communication"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,r.jsx)(n.strong,{children:"Fast"}),": No flash erase by default (2-3x faster)"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcc1 ",(0,r.jsx)(n.strong,{children:"Standalone"}),": Works with binary files, no PlatformIO required"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,r.jsx)(n.strong,{children:"Auto-detection"}),": Automatically finds binary files and serial ports"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcca ",(0,r.jsx)(n.strong,{children:"Data extraction"}),": Captures device serial numbers and public keys"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcdd ",(0,r.jsx)(n.strong,{children:"Output formats"}),": CSV and JSON result files"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,r.jsx)(n.strong,{children:"Sequential processing"}),": Flash multiple devices one by one"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"permission-issues",children:"Permission Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"macOS"}),": No additional setup needed"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Linux"}),": Add user to dialout group"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo usermod -aG dialout $USER\n# Then logout and login again\n"})}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Port busy"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Close other serial monitors, Arduino IDE, or PlatformIO terminals"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Auto-detect fails"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"--port /dev/cu.usbmodem101"})," to specify manually"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"--list-ports"})," to see available ports"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"No device output"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Try ",(0,r.jsx)(n.code,{children:"--erase"})," for a clean flash"]}),"\n",(0,r.jsx)(n.li,{children:"Check USB cable and connection"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Wrong binary files"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"--debug"})," to check file detection"]}),"\n",(0,r.jsx)(n.li,{children:"Verify binary directory structure"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"debug-commands",children:"Debug Commands"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test setup without flashing\nuv run flasher.py --debug\n\n# Test device connection\nuv run flasher.py --test-connection --port /dev/cu.usbmodem101\n\n# List available ports\nuv run flasher.py --list-ports\n"})}),"\n",(0,r.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"zap-flasher/\n\u251c\u2500\u2500 flasher.py              # Main script\n\u251c\u2500\u2500 pyproject.toml          # uv project configuration\n\u251c\u2500\u2500 requirements.txt        # Python dependencies\n\u251c\u2500\u2500 README.md              # Documentation\n\u251c\u2500\u2500 c3_1_1_0/              # Firmware binaries\n\u2502   \u251c\u2500\u2500 bootloader.bin\n\u2502   \u251c\u2500\u2500 partition-table.bin\n\u2502   \u2514\u2500\u2500 zap-idf.bin\n\u2514\u2500\u2500 flash_results_*.csv    # Generated result files\n"})}),"\n",(0,r.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install in development mode\nuv sync --dev\n\n# Run tests (if any)\nuv run pytest\n\n# Format code\nuv run black flasher.py\n\n# Type checking\nuv run mypy flasher.py\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"After flashing devices:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Send CSV file to provisioning team"}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"/developer/hardware/packaging",children:"Packaging Guide"})," for packaging instructions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/developer/zap-for-developers",children:"Zap for Developers"})," - Understanding the Zap platform"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/developer/data-models",children:"Data Models"})," - Device and DER hierarchy"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var i=s(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);